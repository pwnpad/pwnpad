# vim: ft=dockerfile
FROM lopsided/archlinux:devel AS build

# Define user
ENV USER=pwnpad

# Setup base pacman repositories
RUN sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 16/g' /etc/pacman.conf && \
    if [ "$(uname -m)" == "x86_64" ]; then \
        sed -i '/#\[multilib\]/{N;s/#//g}' /etc/pacman.conf && \
        printf '%s\n%s\n%s\n' \
               'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch' \
               'Server = https://download.nus.edu.sg/mirror/archlinux/$repo/os/$arch' \
               'Server = https://mirror.0x.sg/archlinux/$repo/os/$arch' \
                > /etc/pacman.d/mirrorlist ; \
    else \
        printf '%s\n%s\n' \
               'Server = http://tw2.mirror.archlinuxarm.org/$arch/$repo' \
               'Server = https://ca.us.mirror.archlinuxarm.org/$arch/$repo' \
                > /etc/pacman.d/mirrorlist ; \
    fi && \
\
# Setup pwnpad repositories
    printf '\n%s\n%s\n%s\n\n%s\n%s\n%s\n' \
           '[pwnpad]' 'SigLevel = Optional TrustedOnly' \
           'Server = https://raw.githubusercontent.com/pwnpad/pwnpad-repo/master/$arch' \
           '[pwnpad-large]' \
           'SigLevel = Optional TrustedOnly' \
           'Server = https://github.com/pwnpad/pwnpad-large-repo/releases/download/$arch' \
            >> /etc/pacman.conf && \
\
# Setup base packages
    pacman -Syyu --noconfirm && pacman -S --noconfirm systemd-sysvcompat zsh && \
\
# Setup blackarch repositories
    curl -fsSL https://raw.githubusercontent.com/pwnpad/blackarch-mirror/master/strap.sh | sh && \
\
# Setup users
    sed -i 's/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/g' /etc/sudoers && \
    useradd -m -g users -G wheel -s /usr/bin/zsh $USER && \
    touch /home/$USER/.zshrc && \
\
# Download i386 and x86_64 glibc
    sudo pacman -S --noconfirm lib32-gcc-libs

COPY ./config/chroot/pacman64.conf /etc/pacman64.conf
COPY --chown=$USER:users ./config/chroot/pacman64 /home/$USER/.local/bin/pacman64

USER $USER
WORKDIR /home/$USER

# Copy configuration files
COPY --chown=$USER:users ./config/zsh /home/$USER
COPY --chown=$USER:users ./config/tmux /home/$USER
COPY --chown=$USER:users ./config/i3 /home/$USER/.config/i3

# Download tools
RUN mkdir -p /home/$USER/.local/bin && \
    sudo pacman -S --noconfirm bat exa fzf iproute2 iputils less mlocate neovim net-tools nodejs \
         npm openssh openvpn 7zip pigz procps-ng python-pip python-pipx python-virtualenv ripgrep \
         rlwrap tmux unrar unzip wget yay && \
    mkdir /home/$USER/.ssh && touch /home/$USER/.ssh/authorized_keys && \
    chmod 600 /home/$USER/.ssh/authorized_keys && \
    sudo pacman -S --noconfirm pwnpad/aflplusplus binwalk dalfox foremost exploitdb gnu-netcat \
         gobuster hexedit jadx ltrace metasploit nmap one_gadget perl-image-exiftool python-gmpy2 \
         python-pwntools ropper extra/sqlmap strace xortool z3 && \
    sudo pacman -S --noconfirm pwnpad/ngrok pwnpad/yafu && \
    ln -s /usr/bin/vendor_perl/exiftool /home/$USER/.local/bin && \
    sudo setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip /usr/sbin/nmap && \
\
# Download rsactftool
    pipx install git+https://github.com/RsaCtfTool/RsaCtfTool && \
# Download gdb multiarch
    sudo pacman -S --noconfirm pwnpad/gdb-multiarch pwnpad/pwndbg pwnpad/rz-ghidra && \
    sudo pacman -S --noconfirm python-rzpipe && \
    sudo pip install --break-system-packages decomp2dbg && \
    sudo wget -P /usr/share/decomp2dbg \
                 https://raw.githubusercontent.com/mahaloz/decomp2dbg/main/d2d.py && \
    sudo pip install --break-system-packages https://github.com/zolutal/pwn_gadget/archive/refs/heads/main.zip && \
    sudo wget -P /usr/share/pwn_gadget \
                 https://raw.githubusercontent.com/zolutal/pwn_gadget/main/pwn_gadget.py && \

    printf "%s\n%s\n%s\n%s\n%s\n%s\n" \
           "set debuginfod enabled on" \
           "source /usr/share/pwndbg/gdbinit.py" \
           "set r2decompiler rizin" \
           "# set context-ghidra if-no-source" \
           "source /usr/share/decomp2dbg/d2d.py" \
           "source /usr/share/pwn_gadget/pwn_gadget.py" \
        >> /home/$USER/.gdbinit && \
    printf "%s\n" \
           "e ghidra.verbose=false" \
        >> /home/$USER/.rizinrc && \
# Install qemu user and binutils for x86 if on arm
    if [ "$(uname -m)" == "aarch64" ]; then \
        sudo pacman -S --noconfirm pwnpad/qemu-user-x64 ; \
    fi && \
\
# Install Villain
    git clone --depth=1 https://github.com/pwnpad/Villain.git /home/$USER/.local/share/villain && \
    sudo pip install --break-system-packages -r /home/$USER/.local/share/villain/requirements.txt && \
    printf "%s\n%s\n%s\n" '#!/bin/sh' "cd /home/$USER/.local/share/villain" 'python3 Villain.py -qs $@' \
           > /home/$USER/.local/bin/villain && \
    chmod +x /home/$USER/.local/bin/villain && \
\
# Setup Qol tools
    yay -S --noconfirm autojump && \
    sudo mkdir -p /mnt/shared && ln -s /mnt/shared /home/$USER/shared && \
\
# Setup tmux
\
    git clone --depth=1 https://github.com/tmux-plugins/tpm /home/$USER/.tmux/plugins/tpm && \
    /home/$USER/.tmux/plugins/tpm/scripts/install_plugins.sh && \
# Setup Neovim
    git clone --depth=1 https://github.com/PlatyPew/neovim-init.lua.git /home/$USER/.config/nvim && \
    nvim --headless -c "lua require('lazy').restore({wait = true})" -c "qall" && \
    nvim --headless -c "norm i" -c 'execute "sleep 5" | qall' tmp && \
\
# Setup zgenom
    git clone --depth=1 https://github.com/jandamm/zgenom.git "${HOME}/.zgenom" && \
    touch /home/$USER/.hushlogin && \
    zsh -c "source /home/$USER/.zshrc && /home/$USER/.zgenom/sources/romkatv/powerlevel10k/___/gitstatus/install" && \
    mkdir -p /home/$USER/.config/bat/themes /home/$USER/.config/f-sy-h && \
    wget https://raw.githubusercontent.com/catppuccin/bat/main/themes/Catppuccin%20Mocha.tmTheme -O \
         /home/$USER/.config/bat/themes/Catppuccin-mocha.tmTheme && \
    bat cache --build && \
    wget https://raw.githubusercontent.com/catppuccin/zsh-fsh/main/themes/catppuccin-mocha.ini -O \
         /home/$USER/.config/f-sy-h/catppuccin-mocha.ini && \
    zsh -c "source /home/$USER/.zshrc && fast-theme CONFIG:catppuccin-mocha" && \
\
# Clean system
    yay -Scc --noconfirm && yay -Rsc --noconfirm $(yay -Qtdq) ; \
    sudo mv /usr/share/locale/locale.alias /usr/share/locale/en_US /tmp ; \
    sudo rm -rf /usr/share/locale/* ; sudo mv /tmp/locale.alias /tmp/en_US /usr/share/locale ; \
    sudo rm -rf /home/$USER/.zshrc.pre-oh-my-zsh /home/$USER/.zsh_history /home/$USER/.bash_profile \
         /home/$USER/.wget-hsts /home/$USER/.bash_logout /home/$USER/.bundle /tmp/* /var/cache \
         /home/$USER/.cache/pip /home/$USER/.cache/yay /home/$USER/.npm /var/log/* \
         /home/$USER/.zcompdump-buildkitsandbox* ; \
    sudo updatedb

# Setup for systemd
USER root
COPY ./config/docker-entrypoint.sh /


# Copy all files to new image to squash it
FROM scratch

ENV USER=pwnpad
COPY --from=build / /
USER $USER
WORKDIR /home/$USER

CMD ["/bin/zsh"]
